generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Patient {
  patientID         Int              @id @default(autoincrement())
  patientSSN        String           @unique @default("")
  fName             String
  lName             String
  birthDate         DateTime
  age               Int
  gender            String
  address           String           @default("None")
  phone             String           @unique
  email             String           @unique
  smoker            Boolean          @default(false)
  alcoholIntake     Boolean          @default(false)
  bloodGroup        String           @default("None")
  insuranceCompany  String           @default("None")
  insuranceCoverage String           @default("None")
  allergies         String           @default("None")
  chronicDiseases   String           @default("None")
  personalImageURL  String?          @default("default.jpg")
  consultations     Consultation[]
  medicalConditions Diagnosis[]
  Invoices          Invoice[]
  medications       Medications[]
  procedures        Procedure[]
  patientProfile    ProfileLogin?
  radiologyImages   RadiologyImages?
  treatmentPlan     Treatment[]
  visits            Visit[]
}

model Diagnosis {
  diagnosisID     Int              @id @default(autoincrement())
  affectedArea    String
  diagnosis       String
  description     String           @default("None")
  diagnosedDate   DateTime         @default(now())
  patientId       Int
  dentistSsn      String
  cost            Float            @default(300)
  visitId         Int
  diagnose        Dentist          @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  dioagnose       Patient          @relation(fields: [patientId], references: [patientID], onDelete: Cascade)
  visit           Visit            @relation(fields: [visitId], references: [id])
  radiologyImages RadiologyImages?

  @@index([dentistSsn], map: "Diagnosis_dentistSsn_fkey")
  @@index([patientId], map: "Diagnosis_patientId_fkey")
  @@index([visitId], map: "Diagnosis_visitId_fkey")
}

model Treatment {
  treatmentID    Int      @id @default(autoincrement())
  treatmentType  String
  description    String?  @default("None")
  startDate      DateTime
  endDate        DateTime
  status         String
  patientId      Int
  dentistSsn     String
  prescribe      Dentist  @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  treatmentPlans Patient  @relation(fields: [patientId], references: [patientID], onDelete: Cascade)

  @@index([dentistSsn], map: "Treatment_dentistSsn_fkey")
  @@index([patientId], map: "Treatment_patientId_fkey")
}

model Medications {
  id               Int      @id @default(autoincrement())
  name             String
  dosage           Float
  dosageUnit       String
  frequency        String
  prescriptionDate DateTime @default(now())
  patientId        Int
  dentistSsn       String
  prescribe        Dentist  @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  treatmentPlans   Patient  @relation(fields: [patientId], references: [patientID], onDelete: Cascade)

  @@index([dentistSsn], map: "Medications_dentistSsn_fkey")
  @@index([patientId], map: "Medications_patientId_fkey")
}

model RadiologyImages {
  id              Int       @id @default(autoincrement())
  date            DateTime
  type            String
  imageUrl        String
  dentistComments String
  patientId       Int       @unique
  diagnosisId     Int       @unique
  radiologyImages Diagnosis @relation(fields: [diagnosisId], references: [diagnosisID], onDelete: Cascade)
  RadiologyImages Patient   @relation(fields: [patientId], references: [patientID], onDelete: Cascade)
}

model Dentist {
  dentistSSN       String         @id @unique
  fName            String
  lName            String
  birthDate        DateTime
  age              Int
  gender           String
  address          String
  phone            String
  email            String
  specialization   String
  personalImageURL String?        @default("default.jpg")
  consultations    Consultation[]
  diagnosis        Diagnosis[]
  medications      Medications[]
  procedures       Procedure[]
  dentistProfile   ProfileLogin?
  schedules        Schedule[]
  prescription     Treatment[]
  visits           Visit[]
}

model Schedule {
  day        String
  startTime  String
  endTime    String
  dentistSsn String
  schedule   Dentist @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)

  @@id([dentistSsn, day])
}

model Employee {
  employeeSSN      String                @id @unique
  fName            String
  lName            String
  position         String
  gender           String
  phone            String
  email            String
  personalImageURL String?               @default("default.jpg")
  generateInvoice  Invoice[]
  purchasedItems   ItemPurchaseDetails[]
  employeeProfile  ProfileLogin?
}

model ProfileLogin {
  loginId         Int       @id @default(autoincrement())
  username        String    @unique
  password        String
  userType        String
  employeeSsn     String?   @unique
  dentistSsn      String?   @unique
  patientId       Int?      @unique
  dentistProfile  Dentist?  @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  employeeProfile Employee? @relation(fields: [employeeSsn], references: [employeeSSN], onDelete: Cascade)
  patientProfile  Patient?  @relation(fields: [patientId], references: [patientID], onDelete: Cascade)
}

model Invoice {
  billingId       Int       @id @default(autoincrement())
  date            DateTime  @default(now())
  totalCost       Float
  status          String    @default("Unpaid")
  visitId         Int       @unique
  patientId       Int
  employeeSsn     String?
  generateInvoice Employee? @relation(fields: [employeeSsn], references: [employeeSSN], onDelete: Cascade)
  patientInvoice  Patient   @relation(fields: [patientId], references: [patientID], onDelete: Cascade)
  visit           Visit     @relation(fields: [visitId], references: [id], onDelete: Cascade)

  @@index([employeeSsn], map: "Invoice_employeeSsn_fkey")
  @@index([patientId], map: "Invoice_patientId_fkey")
}

model Item {
  itemID               Int                   @id @default(autoincrement())
  name                 String
  description          String
  manufacturer         String
  supplier             String
  equipmentImage       String                @default("inventoryDefaultImage.jpg")
  currentTotalQuantity Int                   @default(0)
  purchaseDetails      ItemPurchaseDetails[]
}

model ItemPurchaseDetails {
  purchaseID    Int      @id @default(autoincrement())
  itemID        Int
  purchaseDate  DateTime @default(now())
  cost          Float
  quantity      Int
  employeeSsn   String
  purchaseItems Employee @relation(fields: [employeeSsn], references: [employeeSSN], onDelete: Cascade)
  item          Item     @relation(fields: [itemID], references: [itemID], onDelete: Cascade)

  @@index([employeeSsn], map: "ItemPurchaseDetails_employeeSsn_fkey")
  @@index([itemID], map: "ItemPurchaseDetails_itemID_fkey")
}

model Visit {
  id            Int            @id @default(autoincrement())
  date          DateTime
  time          String
  status        String
  patientId     Int?
  dentistSsn    String?
  serviceName   String
  consultations Consultation[]
  diagnoses     Diagnosis[]
  invoice       Invoice?
  procedures    Procedure[]
  sets          Dentist?       @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  reserve       Patient?       @relation(fields: [patientId], references: [patientID], onDelete: Cascade)

  @@index([dentistSsn], map: "Visit_dentistSsn_fkey")
  @@index([patientId], map: "Visit_patientId_fkey")
}

model Consultation {
  id                  Int     @id @default(autoincrement())
  summary             String
  cost                Float   @default(100)
  dentistSsn          String
  patientId           Int
  visitId             Int
  performConsultation Dentist @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  consulted           Patient @relation(fields: [patientId], references: [patientID], onDelete: Cascade)
  visit               Visit   @relation(fields: [visitId], references: [id])

  @@index([dentistSsn], map: "Consultation_dentistSsn_fkey")
  @@index([patientId], map: "Consultation_patientId_fkey")
  @@index([visitId], map: "Consultation_visitId_fkey")
}

model Procedure {
  id                Int     @id @default(autoincrement())
  name              String
  description       String?
  cost              Float
  dentistSsn        String
  PatientId         Int
  visitId           Int
  undergoProcedures Patient @relation(fields: [PatientId], references: [patientID], onDelete: Cascade)
  performProcedures Dentist @relation(fields: [dentistSsn], references: [dentistSSN], onDelete: Cascade)
  visit             Visit   @relation(fields: [visitId], references: [id])

  @@index([PatientId], map: "Procedure_PatientId_fkey")
  @@index([dentistSsn], map: "Procedure_dentistSsn_fkey")
  @@index([visitId], map: "Procedure_visitId_fkey")
}
